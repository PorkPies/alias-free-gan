name: CI

on:
  push:
   branches: [ main ]
  pull_request:
   branches: [ main ]

env:
  GKE_LOCATION: us-central1
  IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/aliasfreegan
  IMAGE_TAG: $GITHUB_RUN_ID
  MAX_CHECKS: 120
  CHECK_SPEED: 15

jobs:
  alias-free-gan-test:
    runs-on: ubuntu-latest

    steps:

      - name: Code checkout
        uses: actions/checkout@v2
        with:
          repository: duskvirkus/alias-free-gan-pytorch-lightning
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true


      - name: Use gcloud CLI
        run: gcloud info

      - name: Configure Docker
        run: |-
          gcloud --quiet auth configure-docker
        shell: bash

      - name: Build and Push Docker Image
        run: |
          cd ci
          docker build --tag "$IMAGE:$GITHUB_RUN_ID" -f Dockerfile --build-arg "GITHUB_REF=$GITHUB_REF" .
          docker push "$IMAGE:$GITHUB_RUN_ID"
        shell: bash

      - name: Install jsonnet
        run: |-
          go get github.com/google/go-jsonnet/cmd/jsonnet
        shell: bash

      - name: Get cluster credentials
        run: |-
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region "$GKE_LOCATION"

      - name: Deploy the job on the kubernetes cluster
        run: |-
          job_name=$(jsonnet -J . ci_pytorch/gpu_test.jsonnet --ext-str image=$IMAGE --ext-str image-tag=$IMAGE_TAG | kubectl create -f -) && \
          job_name=${job_name#job.batch/} && \
          job_name=${job_name% created} && \
          echo "Waiting on kubernetes job: $job_name" && \
          i=0 && \
          status_code=2 && \
          # Check on the job periodically. Set the status code depending on what
          # happened to the job in Kubernetes. If we try MAX_CHECKS times and
          # still the job hasn't finished, give up and return the starting
          # non-zero status code.
          while [ $i -lt $MAX_CHECKS ]; do ((i++)); if kubectl get jobs $job_name -o jsonpath='Failed:{.status.failed}' | grep "Failed:1"; then status_code=1 && break; elif kubectl get jobs $job_name -o jsonpath='Succeeded:{.status.succeeded}' | grep "Succeeded:1" ; then status_code=0 && break; else printf "." ; fi; sleep $CHECK_SPEED; done && \
          echo "Done waiting. Job status code: $status_code" && \
          pod_name=$(kubectl get po -l controller-uid=`kubectl get job $job_name -o "jsonpath={.metadata.labels.controller-uid}"` | awk 'match($0,!/NAME/) {print $1}') && \
          echo "GKE pod name: $pod_name" && \
          kubectl logs -f $pod_name --container=train && \
          echo "Done with log retrieval attempt." && \
          # Uncomment this line if building a single-use testing Docker image.
          # gcloud container images delete "$IMAGE:$GITHUB_RUN_ID" --force-delete-tags && \
          exit $status_code
        shell: bash


      